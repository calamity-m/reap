syntax = "proto3";

package sow.v1;

import "google/protobuf/timestamp.proto";

option go_package = "thub.com/calamity-m/reap/proto/sow/v1/sow";

// Records represent an individual record of some food
//
// Each record must have at least a user_id and description.
// The remaining options are all optional to maintain
// ease of use by users.
message Record {
  // User that owns this record. Should be a UUID in string
  // encoding.
  string user_id = 2;
  // Friendly description of this food record, or what was eaten,
  // i.e. "chicken parma with some veggies"
  string description = 3;
  // A specific mapping name of some meal or object that can be
  // referenced for nutritional information later, i.e. "kellog's nutrigrain".
  string name = 4;
  // Kilojules.
  //
  // kj will always take priority over the imperial "calories"
  float kj = 5;
  // Milliliters
  //
  // ml will always take priority over the imperial "fl_oz"
  float ml = 6;
  // Grams, 1/1000 of a kg
  //
  // grams will always take priority over the imperial "oz"
  float grams = 7;
  // Known as calories but effectively kilocalorie.
  // (I hate imperial)
  float calories = 8;
  // Fluid Ounce
  float fl_oz = 9;
  // Ounce
  float oz = 10;
  // Time that this was recorded. If none is provided, the time should be generated
  // by the GRPC service.
  google.protobuf.Timestamp time = 11;
}

// Service to interact with food record entries
service FoodRecordingService {
  // Simple RPC
  //
  // Retrieves a record through a defined id.
  rpc GetRecord(GetRecordRequest) returns (GetRecordResponse) {}
  // Server-client streaming RPC
  //
  // Retrieves one to many records based on the record provided, allowing
  // clients to filter at will excluding record id.
  rpc GetRecords(GetRecordsRequest) returns (stream GetRecordsResponse) {}
  // Simple RPC
  //
  // Creates record
  rpc CreateRecord(CreateRecordRequest) returns (CreateRecordResponse) {}
  // Simple RPC
  //
  // Update some record matching the provided id
  rpc UpdateRecord(UpdateRecordRequest) returns (UpdateRecordResponse) {}
  // Simple RPC
  // Delete some record matching the provided id
  rpc DeleteRecord(DeleteRecordRequest) returns (DeleteRecordResponse) {}
}

message GetRecordRequest {
  // Id of the record to find, expected in uuid format
  string id = 1;
}

message GetRecordResponse {
  // Found record
  Record record = 1;
}

message GetRecordsRequest {
  // Represents the wanted record.
  //
  // Zero values are ignored in filtering. e.g. a value for kj of
  // 0 means any record will be retrieved, regardless of kj value.
  //
  // Description and name are considered to be "contains" filters,
  // e.g. a "bob" value for the description will find all matching
  // records containing "bob" in the description
  Record wanted = 1;
}

message GetRecordsResponse {
  // Found record
  Record record = 1;
}

message CreateRecordRequest {
  // Id of the record to create, expected in uuid format
  string id = 1;
  // Record that is meant to be created
  Record record = 2;
}

message CreateRecordResponse {
  // Record that was created in the database
  Record record = 1;
}

message UpdateRecordRequest {
  // Id of the record to update, expected in uuid format
  string id = 1;
  // Record that will take place of the existing record.
  // Zero values will be ignored.
  Record record = 2;
}

message UpdateRecordResponse {
  // Updated record for verification uses
  Record record = 1;
}

message DeleteRecordRequest {
  // Id of the record to delete, expected in uuid format
  string id = 1;
}

message DeleteRecordResponse {
  // Id of the record that was just deleted
  string id = 1;
}
